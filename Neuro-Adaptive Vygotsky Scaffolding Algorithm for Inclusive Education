import numpy as np
import pandas as pd
from typing import Dict, List, Tuple, Optional
from dataclasses import dataclass
from enum import Enum
import torch
import torch.nn as nn
import torch.nn.functional as F
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import MinMaxScaler
import warnings
warnings.filterwarnings('ignore')

"""
Neuro-Adaptive Vygotsky Scaffolding Algorithm (NAVSA) - Enhanced
==============================================================

A hybrid algorithm that combines:
1. Recurrent Neural Networks with Temporal Attention to model learning patterns
2. Dynamic Zone of Proximal Development (ZPD) based on Vygotsky's theory
3. Neurological anomaly detection inspired by ASD research
4. Multi-agent system for adaptive scaffolding
5. Reinforcement Learning for continuous optimization of pedagogical strategies
6. TASK ASSIGNMENT AND SELECTION LOGIC based on calculated ZPD

Key Innovations:
- Temporal modeling of cognition with differential attention
- Adaptively resized ZPD based on neurological state
- Early detection of cognitive overload
- Personalized multi-modal scaffolding by neurocognitive profile
- Real task assignment and difficulty progression logic
"""

class ScaffoldingType(Enum):
    VISUAL_PROMPT = "visual_prompt"
    VERBAL_HINT = "verbal_hint"
    GESTURE_CUE = "gesture_cue"
    COGNITIVE_BREAK = "cognitive_break"
    SENSORY_ADJUSTMENT = "sensory_adjustment"
    SOCIAL_SUPPORT = "social_support"
    METACOGNITIVE_PROMPT = "metacognitive_prompt"

class TaskType(Enum):
    MATCHING = "matching"
    SEQUENCING = "sequencing"
    CLASSIFICATION = "classification"
    PROBLEM_SOLVING = "problem_solving"
    PATTERN_RECOGNITION = "pattern_recognition"
    MEMORY_RECALL = "memory_recall"
    SPATIAL_REASONING = "spatial_reasoning"
    LANGUAGE_PROCESSING = "language_processing"

@dataclass
class Task:
    """Represents a learning task with difficulty and characteristics"""
    task_id: str
    task_type: TaskType
    difficulty_level: float  # 0.0 to 1.0
    cognitive_demands: Dict[str, float]  # attention, memory, processing, etc.
    estimated_duration: int  # in minutes
    prerequisites: List[str]  # list of prerequisite skills
    description: str
    content: Dict  # task-specific content
    adaptive_parameters: Dict[str, float]  # parameters for adaptation

@dataclass
class NeuroCognitiveProfile:
    """Student's neurocognitive profile based on ASD characteristics"""
    sensory_sensitivity: float  # 0-1: high sensitivity = 1
    attention_span: float       # 0-1: low span = 0, high = 1
    social_preference: float    # 0-1: preference for social interaction
    processing_speed: float     # 0-1: processing speed
    working_memory: float       # 0-1: working memory capacity
    executive_function: float   # 0-1: executive functions
    communication_style: str    # "verbal", "non_verbal", "mixed"
    learning_modality: str      # "visual", "auditory", "kinesthetic", "mixed"

@dataclass
class LearningState:
    """Student's current learning state"""
    current_skill_level: float
    engagement_level: float
    stress_level: float
    cognitive_load: float
    attention_focus: float
    emotional_state: float
    learning_momentum: float    # Rate of recent progress
    zpd_lower_bound: float      # ZPD lower bound
    zpd_upper_bound: float      # ZPD upper bound

class TaskRepository:
    """Repository of learning tasks with adaptive selection capabilities"""
    
    def __init__(self):
        self.tasks = {}
        self.task_history = {}  # student_id -> list of completed tasks
        self.task_performance = {}  # task_id -> performance metrics
        self._initialize_default_tasks()
    
    def _initialize_default_tasks(self):
        """Initialize repository with sample tasks"""
        # Sample tasks with varying difficulty levels
        sample_tasks = [
            Task(
                task_id="match_basic_shapes",
                task_type=TaskType.MATCHING,
                difficulty_level=0.2,
                cognitive_demands={
                    "attention": 0.3,
                    "working_memory": 0.2,
                    "processing_speed": 0.3,
                    "visual_processing": 0.7
                },
                estimated_duration=3,
                prerequisites=[],
                description="Match basic geometric shapes",
                content={
                    "shapes": ["circle", "square", "triangle"],
                    "num_pairs": 3,
                    "visual_complexity": "low"
                },
                adaptive_parameters={
                    "time_limit": 60,
                    "hint_availability": 1.0,
                    "visual_complexity": 0.3
                }
            ),
            Task(
                task_id="sequence_numbers_basic",
                task_type=TaskType.SEQUENCING,
                difficulty_level=0.4,
                cognitive_demands={
                    "attention": 0.5,
                    "working_memory": 0.6,
                    "processing_speed": 0.4,
                    "executive_function": 0.5
                },
                estimated_duration=5,
                prerequisites=["match_basic_shapes"],
                description="Arrange numbers in ascending order",
                content={
                    "sequence_length": 4,
                    "number_range": (1, 10),
                    "visual_aids": True
                },
                adaptive_parameters={
                    "time_limit": 90,
                    "hint_availability": 0.8,
                    "sequence_complexity": 0.4
                }
            ),
            Task(
                task_id="pattern_recognition_intermediate",
                task_type=TaskType.PATTERN_RECOGNITION,
                difficulty_level=0.6,
                cognitive_demands={
                    "attention": 0.7,
                    "working_memory": 0.6,
                    "processing_speed": 0.5,
                    "visual_processing": 0.8
                },
                estimated_duration=7,
                prerequisites=["sequence_numbers_basic"],
                description="Identify and continue visual patterns",
                content={
                    "pattern_complexity": "medium",
                    "pattern_length": 6,
                    "distractors": 2
                },
                adaptive_parameters={
                    "time_limit": 120,
                    "hint_availability": 0.6,
                    "pattern_complexity": 0.6
                }
            ),
            Task(
                task_id="problem_solving_advanced",
                task_type=TaskType.PROBLEM_SOLVING,
                difficulty_level=0.8,
                cognitive_demands={
                    "attention": 0.8,
                    "working_memory": 0.9,
                    "processing_speed": 0.6,
                    "executive_function": 0.9
                },
                estimated_duration=10,
                prerequisites=["pattern_recognition_intermediate"],
                description="Solve multi-step logical problems",
                content={
                    "problem_steps": 4,
                    "logical_complexity": "high",
                    "abstract_reasoning": True
                },
                adaptive_parameters={
                    "time_limit": 180,
                    "hint_availability": 0.4,
                    "problem_complexity": 0.8
                }
            )
        ]
        
        for task in sample_tasks:
            self.tasks[task.task_id] = task
    
    def get_tasks_in_zpd(self, zpd_lower: float, zpd_upper: float, 
                         completed_tasks: List[str] = None) -> List[Task]:
        """Get tasks within the specified ZPD range"""
        if completed_tasks is None:
            completed_tasks = []
        
        suitable_tasks = []
        for task in self.tasks.values():
            if (zpd_lower <= task.difficulty_level <= zpd_upper and 
                task.task_id not in completed_tasks):
                # Check prerequisites
                if all(prereq in completed_tasks for prereq in task.prerequisites):
                    suitable_tasks.append(task)
        
        return sorted(suitable_tasks, key=lambda t: t.difficulty_level)
    
    def get_next_task_recommendation(self, current_skill: float, zpd_bounds: Tuple[float, float],
                                   neuro_profile: NeuroCognitiveProfile,
                                   learning_state: LearningState,
                                   completed_tasks: List[str] = None) -> Optional[Task]:
        """Recommend the next most suitable task"""
        zpd_lower, zpd_upper = zpd_bounds
        suitable_tasks = self.get_tasks_in_zpd(zpd_lower, zpd_upper, completed_tasks or [])
        
        if not suitable_tasks:
            return None
        
        # Score tasks based on student profile and current state
        task_scores = []
        for task in suitable_tasks:
            score = self._calculate_task_suitability_score(
                task, neuro_profile, learning_state
            )
            task_scores.append((task, score))
        
        # Sort by score and return the best match
        task_scores.sort(key=lambda x: x[1], reverse=True)
        return task_scores[0][0] if task_scores else None
    
    def _calculate_task_suitability_score(self, task: Task, 
                                        neuro_profile: NeuroCognitiveProfile,
                                        learning_state: LearningState) -> float:
        """Calculate how suitable a task is for the current student state"""
        base_score = 1.0
        
        # Adjust based on cognitive demands vs. student capabilities
        attention_match = 1.0 - abs(task.cognitive_demands.get("attention", 0.5) - neuro_profile.attention_span)
        memory_match = 1.0 - abs(task.cognitive_demands.get("working_memory", 0.5) - neuro_profile.working_memory)
        processing_match = 1.0 - abs(task.cognitive_demands.get("processing_speed", 0.5) - neuro_profile.processing_speed)
        
        cognitive_compatibility = (attention_match + memory_match + processing_match) / 3
        
        # Adjust based on current learning state
        stress_penalty = learning_state.stress_level * 0.3  # High stress reduces suitability
        engagement_bonus = learning_state.engagement_level * 0.2
        cognitive_load_penalty = max(0, learning_state.cognitive_load - 0.7) * 0.4
        
        # Duration adjustment based on attention span
        duration_factor = 1.0
        if task.estimated_duration > neuro_profile.attention_span * 15:  # 15 minutes max attention
            duration_factor = 0.7
        
        # Learning modality match
        modality_bonus = 0.0
        if neuro_profile.learning_modality == "visual" and task.task_type in [TaskType.MATCHING, TaskType.PATTERN_RECOGNITION]:
            modality_bonus = 0.1
        elif neuro_profile.learning_modality == "auditory" and task.task_type == TaskType.LANGUAGE_PROCESSING:
            modality_bonus = 0.1
        
        final_score = (base_score * cognitive_compatibility * duration_factor + 
                      engagement_bonus + modality_bonus - stress_penalty - cognitive_load_penalty)
        
        return max(0.0, min(final_score, 1.0))
    
    def adapt_task_difficulty(self, task: Task, target_difficulty: float,
                            neuro_profile: NeuroCognitiveProfile) -> Task:
        """Adapt task parameters to match target difficulty"""
        adapted_task = Task(
            task_id=f"{task.task_id}_adapted_{target_difficulty:.2f}",
            task_type=task.task_type,
            difficulty_level=target_difficulty,
            cognitive_demands=task.cognitive_demands.copy(),
            estimated_duration=task.estimated_duration,
            prerequisites=task.prerequisites.copy(),
            description=f"{task.description} (adapted)",
            content=task.content.copy(),
            adaptive_parameters=task.adaptive_parameters.copy()
        )
        
        # Adjust task parameters based on target difficulty
        difficulty_ratio = target_difficulty / task.difficulty_level if task.difficulty_level > 0 else 1.0
        
        # Adjust cognitive demands
        for demand in adapted_task.cognitive_demands:
            adapted_task.cognitive_demands[demand] *= difficulty_ratio
            adapted_task.cognitive_demands[demand] = min(1.0, adapted_task.cognitive_demands[demand])
        
        # Adjust task-specific parameters
        if task.task_type == TaskType.MATCHING:
            adapted_task.content["num_pairs"] = max(2, int(adapted_task.content["num_pairs"] * difficulty_ratio))
            adapted_task.adaptive_parameters["visual_complexity"] *= difficulty_ratio
        
        elif task.task_type == TaskType.SEQUENCING:
            adapted_task.content["sequence_length"] = max(3, int(adapted_task.content["sequence_length"] * difficulty_ratio))
            adapted_task.content["number_range"] = (
                adapted_task.content["number_range"][0],
                max(adapted_task.content["number_range"][1], int(adapted_task.content["number_range"][1] * difficulty_ratio))
            )
        
        elif task.task_type == TaskType.PATTERN_RECOGNITION:
            adapted_task.content["pattern_length"] = max(4, int(adapted_task.content["pattern_length"] * difficulty_ratio))
            adapted_task.content["distractors"] = max(1, int(adapted_task.content["distractors"] * difficulty_ratio))
        
        # Adjust time limits and hints based on neurological profile
        if neuro_profile.processing_speed < 0.5:
            adapted_task.adaptive_parameters["time_limit"] *= 1.5
        
        if neuro_profile.attention_span < 0.4:
            adapted_task.adaptive_parameters["hint_availability"] = min(1.0, 
                adapted_task.adaptive_parameters["hint_availability"] * 1.3)
        
        return adapted_task

class TemporalAttentionNetwork(nn.Module):
    """
    Neural Network with Temporal Attention to model learning patterns
    Inspired by Transformer architectures, but adapted for neuro-educational signals
    """

    def __init__(self, input_dim=12, hidden_dim=64, num_heads=4, num_layers=3):
        super().__init__()
        self.input_dim = input_dim
        self.hidden_dim = hidden_dim

        # Embedding of neurological features
        self.neuro_embedding = nn.Linear(input_dim, hidden_dim)

        # Temporal attention layers
        self.attention_layers = nn.ModuleList([
            nn.MultiheadAttention(hidden_dim, num_heads, batch_first=True)
            for _ in range(num_layers)
        ])

        # Normalizations
        self.layer_norms = nn.ModuleList([
            nn.LayerNorm(hidden_dim) for _ in range(num_layers)
        ])

        # LSTM to capture long-term temporal dependencies
        self.lstm = nn.LSTM(hidden_dim, hidden_dim//2, 2,
                             batch_first=True, bidirectional=True)

        # Prediction heads
        self.zpd_predictor = nn.Linear(hidden_dim, 2)  # lower, upper bounds
        self.engagement_predictor = nn.Linear(hidden_dim, 1)
        self.cognitive_load_predictor = nn.Linear(hidden_dim, 1)
        self.scaffolding_need_predictor = nn.Linear(hidden_dim, len(ScaffoldingType))
        self.optimal_difficulty_predictor = nn.Linear(hidden_dim, 1)  # NEW: optimal task difficulty

        # Dropout for regularization
        self.dropout = nn.Dropout(0.1)

    def forward(self, x, mask=None):
        """
        x: tensor of shape (batch_size, sequence_length, input_dim)
        mask: mask for sequences of different lengths
        """
        batch_size, seq_len, _ = x.shape

        # Initial embedding
        x = self.neuro_embedding(x)  # (batch, seq, hidden)

        # Apply temporal attention layers
        for attention, norm in zip(self.attention_layers, self.layer_norms):
            # Self-attention
            attended, attention_weights = attention(x, x, x,
                                                     key_padding_mask=mask)
            x = norm(x + self.dropout(attended))

        # LSTM to capture temporal patterns
        lstm_out, (hidden, cell) = self.lstm(x)

        # Use the last hidden state for predictions
        final_state = lstm_out[:, -1, :]  # (batch, hidden)

        # Predictions
        zpd_bounds = torch.sigmoid(self.zpd_predictor(final_state))
        engagement = torch.sigmoid(self.engagement_predictor(final_state))
        cognitive_load = torch.sigmoid(self.cognitive_load_predictor(final_state))
        scaffolding_probs = torch.softmax(self.scaffolding_need_predictor(final_state), dim=1)
        optimal_difficulty = torch.sigmoid(self.optimal_difficulty_predictor(final_state))

        return {
            'zpd_bounds': zpd_bounds,
            'engagement': engagement,
            'cognitive_load': cognitive_load,
            'scaffolding_probs': scaffolding_probs,
            'optimal_difficulty': optimal_difficulty,  # NEW
            'hidden_state': final_state,
            'attention_weights': attention_weights
        }

class NeuroAnomalyDetector:
    """
    Neurological anomaly detector based on Isolation Forest
    Identifies atypical patterns that may indicate overload or disengagement
    """

    def __init__(self, contamination=0.1):
        self.isolation_forest = IsolationForest(
            contamination=contamination,
            random_state=42,
            n_estimators=100
        )
        self.scaler = MinMaxScaler()
        self.is_fitted = False

    def fit(self, neuro_signals: np.ndarray):
        """Trains the detector with normalized neurological signals"""
        scaled_signals = self.scaler.fit_transform(neuro_signals)
        self.isolation_forest.fit(scaled_signals)
        self.is_fitted = True

    def detect_anomaly(self, signal: np.ndarray) -> Tuple[bool, float]:
        """
        Detects if the current signal is anomalous
        Returns: (is_anomaly, anomaly_score)
        """
        if not self.is_fitted:
            return False, 0.0

        scaled_signal = self.scaler.transform(signal.reshape(1, -1))
        prediction = self.isolation_forest.predict(scaled_signal)[0]
        score = self.isolation_forest.decision_function(scaled_signal)[0]

        is_anomaly = prediction == -1
        return is_anomaly, score

class DynamicZPDCalculator:
    """
    Dynamic Zone of Proximal Development calculator
    Adapts ZPD based on neurological state and learning history
    """

    def __init__(self, base_zpd_width=0.3, adaptation_rate=0.1):
        self.base_zpd_width = base_zpd_width
        self.adaptation_rate = adaptation_rate

    def calculate_zpd(self, current_skill: float,
                      neuro_profile: NeuroCognitiveProfile,
                      learning_state: Optional[LearningState] = None,
                      recent_performance: List[float] = None) -> Tuple[float, float]:
        """
        Calculates ZPD adaptively based on multiple factors
        """
        # Base ZPD centered on current skill level
        base_lower = max(0.0, current_skill - self.base_zpd_width/2)
        base_upper = min(1.0, current_skill + self.base_zpd_width/2)

        # Adaptation factors based on neurological profile
        attention_factor = 0.8 + 0.4 * neuro_profile.attention_span
        processing_factor = 0.8 + 0.4 * neuro_profile.processing_speed
        working_memory_factor = 0.7 + 0.6 * neuro_profile.working_memory

        # Current state factor (Handle None case)
        if learning_state is not None:
            stress_factor = 1.2 - learning_state.stress_level  # High stress reduces ZPD
            engagement_factor = 0.6 + 0.8 * learning_state.engagement_level
            cognitive_load_factor = 1.3 - learning_state.cognitive_load
        else:
            # Default factors if no previous state
            stress_factor = 1.0
            engagement_factor = 1.0
            cognitive_load_factor = 1.0

        # Learning momentum factor
        if recent_performance and len(recent_performance) > 0:
            momentum = np.mean(np.diff(recent_performance)) if len(recent_performance) > 1 else 0
            momentum_factor = 1.0 + np.tanh(momentum * 5) * 0.3
        else:
            momentum_factor = 1.0

        # Combine all factors
        adaptation_factor = (
            attention_factor * processing_factor * working_memory_factor *
            stress_factor * engagement_factor * cognitive_load_factor *
            momentum_factor
        ) / 6  # Normalize by average

        # Apply adaptation
        adapted_width = self.base_zpd_width * adaptation_factor

        zpd_lower = max(0.0, current_skill - adapted_width/2)
        zpd_upper = min(1.0, current_skill + adapted_width/2)

        # Smooth abrupt changes (Handle None case)
        if learning_state is not None and hasattr(learning_state, 'zpd_lower_bound') and learning_state.zpd_lower_bound is not None:
            zpd_lower = (1 - self.adaptation_rate) * learning_state.zpd_lower_bound + \
                        self.adaptation_rate * zpd_lower
            zpd_upper = (1 - self.adaptation_rate) * learning_state.zpd_upper_bound + \
                        self.adaptation_rate * zpd_upper

        return zpd_lower, zpd_upper

class MultiModalScaffoldingAgent:
    """
    Multi-modal scaffolding agent that selects interventions
    based on neurocognitive profile and current state
    """

    def __init__(self):
        # Compatibility matrix: neurocognitive profile × scaffolding type
        self.scaffolding_compatibility = {
            'high_sensory_sensitivity': {
                ScaffoldingType.VISUAL_PROMPT: 0.9,
                ScaffoldingType.VERBAL_HINT: 0.3,
                ScaffoldingType.GESTURE_CUE: 0.7,
                ScaffoldingType.COGNITIVE_BREAK: 0.8,
                ScaffoldingType.SENSORY_ADJUSTMENT: 0.95,
                ScaffoldingType.SOCIAL_SUPPORT: 0.4,
                ScaffoldingType.METACOGNITIVE_PROMPT: 0.6
            },
            'low_attention_span': {
                ScaffoldingType.VISUAL_PROMPT: 0.8,
                ScaffoldingType.VERBAL_HINT: 0.4,
                ScaffoldingType.GESTURE_CUE: 0.9,
                ScaffoldingType.COGNITIVE_BREAK: 0.95,
                ScaffoldingType.SENSORY_ADJUSTMENT: 0.7,
                ScaffoldingType.SOCIAL_SUPPORT: 0.5,
                ScaffoldingType.METACOGNITIVE_PROMPT: 0.3
            },
            'low_social_preference': {
                ScaffoldingType.VISUAL_PROMPT: 0.95,
                ScaffoldingType.VERBAL_HINT: 0.8,
                ScaffoldingType.GESTURE_CUE: 0.6,
                ScaffoldingType.COGNITIVE_BREAK: 0.7,
                ScaffoldingType.SENSORY_ADJUSTMENT: 0.8,
                ScaffoldingType.SOCIAL_SUPPORT: 0.2,
                ScaffoldingType.METACOGNITIVE_PROMPT: 0.9
            }
        }

    def select_scaffolding(self, neuro_profile: NeuroCognitiveProfile,
                           learning_state: LearningState,
                           neural_predictions: Dict) -> List[Tuple[ScaffoldingType, float]]:
        """
        Selects the most appropriate scaffolding types
        Returns: List of (type, intensity) ordered by priority
        """
        scaffolding_scores = {}

        # Base scores from neural predictions
        neural_probs = np.array(neural_predictions.get('scaffolding_probs', np.ones(len(ScaffoldingType)) / len(ScaffoldingType)))

        # Ensure neural_probs is flat if it came from a batch prediction
        if neural_probs.ndim > 1 and neural_probs.shape[0] == 1:
            neural_probs = neural_probs.flatten()

        for i, scaffolding_type in enumerate(ScaffoldingType):
            # Directly get the scalar probability for this scaffolding type
            base_score = float(neural_probs[i])

            # Adjust based on neurocognitive profile
            profile_multiplier = 1.0

            # Sensory sensitivity
            if neuro_profile.sensory_sensitivity > 0.7:
                profile_multiplier *= self.scaffolding_compatibility['high_sensory_sensitivity'].get(
                    scaffolding_type, 1.0)

            # Attention span
            if neuro_profile.attention_span < 0.4:
                profile_multiplier *= self.scaffolding_compatibility['low_attention_span'].get(
                    scaffolding_type, 1.0)

            # Social preference
            if neuro_profile.social_preference < 0.4:
                profile_multiplier *= self.scaffolding_compatibility['low_social_preference'].get(
                    scaffolding_type, 1.0)

            # Adjust based on current state
            state_multiplier = 1.0

            # High stress favors breaks and sensory adjustments
            if learning_state.stress_level > 0.7:
                if scaffolding_type in [ScaffoldingType.COGNITIVE_BREAK,
                                        ScaffoldingType.SENSORY_ADJUSTMENT]:
                    state_multiplier *= 1.5
                elif scaffolding_type == ScaffoldingType.SOCIAL_SUPPORT:
                    state_multiplier *= 0.5

            # Low engagement favors more active scaffolding
            if learning_state.engagement_level < 0.4:
                if scaffolding_type in [ScaffoldingType.GESTURE_CUE,
                                        ScaffoldingType.VISUAL_PROMPT]:
                    state_multiplier *= 1.3

            # High cognitive load favors simplification
            if learning_state.cognitive_load > 0.8:
                if scaffolding_type in [ScaffoldingType.COGNITIVE_BREAK,
                                        ScaffoldingType.VISUAL_PROMPT]:
                    state_multiplier *= 1.4
                elif scaffolding_type == ScaffoldingType.METACOGNITIVE_PROMPT:
                    state_multiplier *= 0.6

            final_score = base_score * profile_multiplier * state_multiplier
            scaffolding_scores[scaffolding_type] = min(final_score, 1.0)

        # Sort by score and return top 3
        sorted_scaffolding = sorted(scaffolding_scores.items(),
                                    key=lambda x: x[1], reverse=True)

        return sorted_scaffolding[:3]

class NAVSACore:
    """
    Main core of the NAVSA algorithm
    Integrates all components for adaptive scaffolding and task assignment
    """

    def __init__(self, sequence_length=10):
        self.sequence_length = sequence_length
        self.temporal_network = TemporalAttentionNetwork()
        self.anomaly_detector = NeuroAnomalyDetector()
        self.zpd_calculator = DynamicZPDCalculator()
        self.scaffolding_agent = MultiModalScaffoldingAgent()
        self.task_repository = TaskRepository()  # NEW: Task repository

        # State history for temporal analysis
        self.state_history: List[LearningState] = []
        self.performance_history: List[float] = []
        self.completed_tasks: List[str] = []  # NEW: Track completed tasks
        self.current_task: Optional[Task] = None  # NEW: Current assigned task

        # Effectiveness metrics
        self.intervention_success_rate = {}
        self.task_completion_rate = {}  # NEW: Track task completion rates
        self.adaptation_count = 0

    def update_student_state(self, neuro_profile: NeuroCognitiveProfile,
                             current_measurements: Dict) -> LearningState:
        """
        Updates the student's state based on current measurements
        """
        # Extract measurements
        current_skill = current_measurements.get('skill_level', 0.5)
        engagement = current_measurements.get('engagement', 0.5)
        stress = current_measurements.get('stress', 0.5)

        # Calculate cognitive load based on multiple factors
        cognitive_load = self._calculate_cognitive_load(
            current_measurements, neuro_profile)

        # Calculate attention focus
        attention_focus = self._calculate_attention_focus(
            current_measurements, neuro_profile)

        # Estimate emotional state
        emotional_state = self._estimate_emotional_state(
            engagement, stress, current_measurements)

        # Calculate learning momentum
        learning_momentum = self._calculate_learning_momentum()

        # Dynamically calculate ZPD
        zpd_lower, zpd_upper = self.zpd_calculator.calculate_zpd(
            current_skill, neuro_profile,
            self.state_history[-1] if self.state_history else None,
            self.performance_history[-5:]  # Last 5 performances
        )

        # Create new state
        new_state = LearningState(
            current_skill_level=current_skill,
            engagement_level=engagement,
            stress_level=stress,
            cognitive_load=cognitive_load,
            attention_focus=attention_focus,
            emotional_state=emotional_state,
            learning_momentum=learning_momentum,
            zpd_lower_bound=zpd_lower,
            zpd_upper_bound=zpd_upper
        )

        # Update history
        self.state_history.append(new_state)
        if len(self.state_history) > self.sequence_length:
            self.state_history.pop(0)

        self.performance_history.append(current_skill)
        if len(self.performance_history) > 20:  # Keep last 20
